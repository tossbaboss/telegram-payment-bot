import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, ReplyKeyboardRemove

# =========================================================
#                   1. CONFIGURATION (MANDATORY CHANGES)
# =========================================================

# 1. Your bot token
TOKEN = "8405037254:AAH-YlQCvru2bOXjJe8y3HmQTNF1_StOJRY"  # <--- –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–ò–ú –¢–û–ö–ï–ù–û–ú

# 2. Your Telegram ID (where screenshots will be forwarded)
ADMIN_ID = 1866001822  # <--- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ß–ò–°–õ–û –ù–ê –í–ê–® ID

# 3. Payment details (–û–ë–ù–û–í–õ–ï–ù–û: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è PayPal)
USDT_DETAILS = "USDT (TRC-20) Wallet Address: **TzXXXXXXXXXXXX**\n\nPlease pay the exact amount."

# –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
PAYPAL_DETAILS = "Our PayPal: **email@example.com**\n\n" \
                 "**‚ö†Ô∏è IMPORTANT:**\n" \
                 "Please use the **\"Friends and Family\"** option to ensure the full payment is received. " \
                 "If using **\"Goods and Services,\"** **YOU MUST COVER ALL PROCESSING FEES.**"

ALIPAY_DETAILS = "Our Alipay Number: **1234567890**"

# 4. Paths to QR code images
USDT_QR_PATH = "usdt_qr.png" 
ALIPAY_QR_PATH = "alipay_qr.png" 

# 5. Welcome photo path (–ü–†–û–í–ï–†–¨–¢–ï –ò–ú–Ø!)
WELCOME_PHOTO_PATH = "welcome_photo.jpg" 

# =========================================================
#                    2. FSM AND INITIALIZATION
# =========================================================

# State machine for screenshot waiting
class PaymentStates(StatesGroup):
    waiting_for_screenshot = State()

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher()

# =========================================================
#                       3. KEYBOARDS
# =========================================================

# Main payment selection keyboard
def get_payment_keyboard():
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üí∞ USDt (TRC-20)", callback_data="pay_usdt"),
                types.InlineKeyboardButton(text="üí≥ PayPal", callback_data="pay_paypal"),
            ],
            [
                types.InlineKeyboardButton(text="üí∏ Alipay", callback_data="pay_alipay"),
            ]
        ]
    )
    return keyboard

# Confirmation and Back buttons
confirm_and_back_keyboard = types.InlineKeyboardMarkup(
    inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ I Paid", callback_data="confirm_payment"),
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_to_menu")
        ]
    ]
)

# =========================================================
#                       4. HANDLERS
# =========================================================

# 1. /start handler 
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    
    # 1. Remove any stuck ReplyKeyboardMarkup
    await message.answer(
        "Starting bot...",
        reply_markup=ReplyKeyboardRemove() 
    )

    # 2. Send welcome photo and main menu
    try:
        photo_file = FSInputFile(WELCOME_PHOTO_PATH)
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo_file,
            caption=f"Hello, {message.from_user.full_name}! üëã\n\n"
                    "Please select your preferred payment method:",
            reply_markup=get_payment_keyboard()
        )
    except FileNotFoundError:
        # Fallback if photo is not found
        await message.answer(
            f"Hello, {message.from_user.full_name}! üëã\n\n"
            "Please select your preferred payment method:",
            reply_markup=get_payment_keyboard()
        )
    except Exception as e:
        # Fallback for other photo errors
        print(f"Error sending photo: {e}")
        await message.answer(
            f"Hello, {message.from_user.full_name}! üëã\n\n"
            "Please select your preferred payment method:",
            reply_markup=get_payment_keyboard()
        )


# 2. Back button handler (–ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é)
@dp.callback_query(lambda c: c.data == 'back_to_menu')
async def back_to_menu_handler(callback_query: types.CallbackQuery, state: FSMContext):
    
    # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ (–∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥")
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    
    # 2. –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ "You have selected...")
    try:
        # –£–î–ê–õ–ò–¢–¨ –õ–ò–®–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –ò–ó –ß–ê–¢–ê
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id - 1
        )
    except Exception:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/—É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å—Ç–∞—Ä—ã–º)
        pass

    # 3. –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é (—Å —Ñ–æ—Ç–æ)
    await command_start_handler(callback_query.message)
        
    await callback_query.answer()


# 3. Payment selection handler
@dp.callback_query(lambda c: c.data and c.data.startswith('pay_'))
async def process_payment_selection(callback_query: types.CallbackQuery):
    
    method = callback_query.data.split('_')[1]
    details = ""
    send_photo = False
    qr_path = None 

    # 1. –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –ü–†–ï–î–´–î–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –ú–ï–ù–Æ
    # –ò–∑–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å (caption) —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ.
    try:
        await bot.edit_message_caption(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            caption="You have selected a payment method. Here are the details:",
            reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–∞
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="You have selected a payment method. Here are the details:",
            reply_markup=None
        )


    # 2. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –†–ï–ö–í–ò–ó–ò–¢–´
    if method == "usdt":
        details = USDT_DETAILS
        qr_path = USDT_QR_PATH
        send_photo = True
    elif method == "paypal":
        details = PAYPAL_DETAILS
        send_photo = False
    elif method == "alipay":
        details = ALIPAY_DETAILS
        qr_path = ALIPAY_QR_PATH
        send_photo = True

    # 3. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –†–ï–ö–í–ò–ó–ò–¢–´
    if send_photo:
        try:
            photo_file = FSInputFile(qr_path)
            
            await bot.send_photo(
                chat_id=callback_query.message.chat.id,
                photo=photo_file,
                caption=f"**Payment Method: {method.upper()}**\n\n{details}\n\n[QR code for payment]",
                parse_mode="Markdown",
                reply_markup=confirm_and_back_keyboard
            )
        except FileNotFoundError:
            # Fallback if QR code is missing
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text=f"**Payment Method: {method.upper()}**\n\n{details}\n\n[Error: QR code file '{qr_path}' not found!]",
                parse_mode="Markdown",
                reply_markup=confirm_and_back_keyboard
            )
    else:
        # Send text-only details (for PayPal)
        # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PAYPAL_DETAILS, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç.
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=f"**Payment Method: {method.upper()}**\n\n{details}",
            parse_mode="Markdown",
            reply_markup=confirm_and_back_keyboard
        )

    await callback_query.answer()


# 4. I Paid button handler
@dp.callback_query(lambda c: c.data == 'confirm_payment')
async def process_confirm_payment(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(PaymentStates.waiting_for_screenshot)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (You have selected...)
    try:
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id - 1
        )
    except Exception:
        pass

    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="Please **attach a screenshot** (photo) of the payment confirmation."
    )
    
    await callback_query.answer()


# 5. Screenshot handler
@dp.message(PaymentStates.waiting_for_screenshot)
async def process_screenshot(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("I am expecting a photo (screenshot). Please send the image.")
        return

    await state.clear()
    
    # Notify admin
    if ADMIN_ID != 0:
        await bot.send_photo(
            chat_id=ADMIN_ID,
            photo=message.photo[-1].file_id, 
            caption=f"‚ùóÔ∏è **NEW PAYMENT RECEIVED** ‚ùóÔ∏è\n"
                    f"From user: @{message.from_user.username} (ID: {message.from_user.id})\n"
                    f"Please verify the payment screenshot.",
            parse_mode="Markdown"
        )
    
    # Send final message to user
    await message.answer(
        "‚úÖ **Screenshot received.**\n\n"
        "My working hours are **9:00 AM ‚Äì 8:00 PM (Indochina Time)**. Please wait for payment confirmation ‚Äî once it‚Äôs confirmed, you‚Äôll receive the guide right away."
    )


# =========================================================
#                       5. RUN
# =========================================================

async def main() -> None:
    await bot.delete_webhook(drop_pending_updates=True) 
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())